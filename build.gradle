// build.gradle (root of your DamageIndicator project)

import org.gradle.api.tasks.compile.JavaCompile

plugins {
    id 'java-library'                                  // expose your classes as an API
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'maven-publish'                                 // adds publishToMavenLocal
}

group = 'com.github.Teenkung123'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = JavaLanguageVersion.of(17)
    targetCompatibility = JavaLanguageVersion.of(17)
}

repositories {
    mavenCentral()
    maven { name = 'papermc-repo'; url = 'https://repo.papermc.io/repository/maven-public/' }
    maven { name = 'sonatype';    url = 'https://oss.sonatype.org/content/groups/public/' }
    maven { url  = 'https://jitpack.io' }
    maven { url  = 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
    maven { name = 'phoenix';     url = 'https://nexus.phoenixdevt.fr/repository/maven-public/' }
    maven { url  = 'https://mvn.lumine.io/repository/maven-public/' }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.20.4-R0.1-SNAPSHOT'
    compileOnly 'me.clip:placeholderapi:2.11.6'
    compileOnly 'io.lumine:Mythic-Dist:5.6.1'
    compileOnly 'io.lumine:MythicLib-dist:1.6.2-SNAPSHOT'
    compileOnly 'com.ticxo.modelengine:ModelEngine:R4.0.4'
    compileOnly 'com.github.HologramLib:HologramLib:1.7.0'
    compileOnly fileTree(dir: 'libs', include: ['*.jar'])
}

shadowJar {
    // Drop the "-all" classifier so JitPack publishes the same jar you deploy
    archiveClassifier.set('')
    dependencies {
        include(dependency('com.github.HologramLib:HologramLib:1.7.0'))
    }
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // publish your shaded plugin jar
            artifact(tasks.shadowJar) {
                classifier = null
            }
            // optional: publish sources too
            artifact(tasks.sourcesJar)
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(17)
}

processResources {
    inputs.property('version', project.version)
    filteringCharset = 'UTF-8'
    filesMatching('plugin.yml') {
        expand(version: project.version)
    }
}
